import numpy as np
index = 0
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

class NeuralNetwork:
    def __init__(self, x, y, load_weights=False):
        self.input = x
        self.y = y
        self.output = np.zeros(y.shape)

        if load_weights:
            self.load_weights()
        else:
            self.weights1 = np.random.rand(self.input.shape[1], 4)
            self.weights2 = np.random.rand(4, 1)

    def feedforward(self):
        self.layer1 = sigmoid(np.dot(self.input, self.weights1))
        self.output = sigmoid(np.dot(self.layer1, self.weights2))

    def backpropagate(self):
        d_weights2 = np.dot(self.layer1.T, (2*(self.y - self.output) * sigmoid_derivative(self.output)))
        d_weights1 = np.dot(self.input.T, (np.dot(2*(self.y - self.output) * sigmoid_derivative(self.output), self.weights2.T) * sigmoid_derivative(self.layer1)))

        self.weights1 += d_weights1
        self.weights2 += d_weights2

    def save_weights(self):
        np.save('weights1.npy', self.weights1)
        np.save('weights2.npy', self.weights2)

    def load_weights(self):
        self.weights1 = np.load('weights1.npy')
        self.weights2 = np.load('weights2.npy')

if __name__ == "__main__":
    X = np.array([[0,0], [0,1], [1,0], [1,1]])
    y = np.array([[0], [1], [1], [0]])

    # Initialize neural network and optionally load weights
    nn = NeuralNetwork(X, y, load_weights=True)

    for _ in range(100000):
        nn.feedforward()
        nn.backpropagate()
        index += 1
        if index == 10000:
          nn.save_weights()
          index = 0
    
    print(nn.output)
